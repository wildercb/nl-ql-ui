{"version":3,"mappings":";m0BAKO,MAAMA,EAAgBC,EAAY,QAAS,IAAM,CACtD,MAAMC,EAAQC,EAAW,QAAQ,EAE3BC,EAASC,EAAS,IAClBH,EAAM,QAAU,SACX,OAAO,WAAW,8BAA8B,EAAE,QAEpDA,EAAM,QAAU,MACxB,EAEKI,EAAkB,IAAM,CAE5B,MAAMC,EAAa,aAAa,QAAQ,OAAO,EAC3CA,GAAc,CAAC,QAAS,OAAQ,QAAQ,EAAE,SAASA,CAAU,IAC/DL,EAAM,MAAQK,GAIhBC,EAAA,EAGA,OAAO,WAAW,8BAA8B,EAAE,iBAAiB,SAAU,IAAM,CAC7EN,EAAM,QAAU,UAClBM,EAAA,CACF,CACD,GAGGC,EAAYC,GAAoB,CACpCR,EAAM,MAAQQ,EACd,aAAa,QAAQ,QAASA,CAAQ,EACtCF,EAAA,CAAW,EAGPA,EAAa,IAAM,CACvB,MAAMG,EAAO,SAAS,gBAClBP,EAAO,MACTO,EAAK,UAAU,IAAI,MAAM,EAEzBA,EAAK,UAAU,OAAO,MAAM,CAC9B,EAGIC,EAAc,IAAM,CACpBV,EAAM,QAAU,QAClBO,EAAS,MAAM,EACNP,EAAM,QAAU,OACzBO,EAAS,QAAQ,EAEjBA,EAAS,OAAO,CAClB,EAGF,MAAO,CACL,MAAOJ,EAAS,IAAMH,EAAM,KAAK,EACjC,OAAAE,EACA,gBAAAE,EACA,SAAAG,EACA,WAAAD,EACA,YAAAI,CAAA,CAEJ,CAAC,2FCxDD,MAAMC,EAAab,EAAA,EAEnB,OAAAc,EAAU,IAAM,CAEdD,EAAW,iBAAgB,CAC5B,kCAdC,OAAAE,EAAA,EAAAC,EAEM,MAFNC,EAEM,CADJC,EAAcC,CAAA,2+BCCZC,EAA2B,CAC/B,CACE,KAAM,IACN,KAAM,OACN,UAAW,IAAAC,EAAA,IAAM,OAAO,wBAAsB,0BAC9C,KAAM,CAAE,MAAO,yCAAyC,EAE1D,CACE,KAAM,cACN,KAAM,aACN,UAAW,IAAAA,EAAA,IAAM,OAAO,8BAA4B,4BACpD,KAAM,CAAE,MAAO,mBAAmB,EAEpC,CACE,KAAM,UACN,KAAM,SACN,UAAW,IAAAA,EAAA,IAAM,OAAO,0BAAwB,0BAChD,KAAM,CAAE,MAAO,YAAY,EAE7B,CACE,KAAM,WACN,KAAM,UACN,UAAW,IAAAA,EAAA,IAAM,OAAO,2BAAyB,0BACjD,KAAM,CAAE,MAAO,gBAAgB,EAEjC,CACE,KAAM,YACN,KAAM,WACN,UAAW,IAAAA,EAAA,IAAM,OAAO,4BAA0B,0BAClD,KAAM,CAAE,MAAO,WAAW,EAE5B,CACE,KAAM,QACN,KAAM,gBACN,UAAW,IAAAA,EAAA,IAAM,OAAO,wBAAsB,0BAC9C,KAAM,CAAE,MAAO,gBAAgB,EAEjC,CACE,KAAM,mBACN,KAAM,WACN,UAAW,IAAAA,EAAA,IAAM,OAAO,4BAA0B,0BAClD,KAAM,CAAE,MAAO,iBAAiB,CAEpC,EAEMC,EAASC,EAAa,CAC1B,QAASC,EAAiB,GAAwB,EAClD,OAAAJ,EACA,eAAeK,EAAIC,EAAMC,EAAe,CACtC,OAAIA,GAGK,CAAE,IAAK,EAChB,CAEJ,CAAC,EAGDL,EAAO,WAAW,CAACG,EAAIC,EAAME,IAAS,CACpC,MAAMC,EAAQJ,EAAG,KAAK,MAClBI,IACF,SAAS,MAAQ,GAAGA,CAAK,eAE3BD,EAAA,CACF,CAAC,EC5DD,MAAME,EAAMC,EAAUC,CAAG,EAGzBF,EAAI,IAAIG,GAAa,EACrBH,EAAI,IAAIR,CAAM,EAGdQ,EAAI,MAAM,MAAM","names":["useThemeStore","defineStore","theme","ref","isDark","computed","initializeTheme","savedTheme","applyTheme","setTheme","newTheme","html","toggleTheme","themeStore","onMounted","_openBlock","_createElementBlock","_hoisted_1","_createVNode","_component_RouterView","routes","__vitePreload","router","createRouter","createWebHistory","to","from","savedPosition","next","title","app","createApp","App","createPinia"],"ignoreList":[],"sources":["../../src/stores/theme.ts","../../src/App.vue","../../src/router/index.ts","../../src/main.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed } from 'vue'\n\nexport type Theme = 'light' | 'dark' | 'system'\n\nexport const useThemeStore = defineStore('theme', () => {\n  const theme = ref<Theme>('system')\n\n  const isDark = computed(() => {\n    if (theme.value === 'system') {\n      return window.matchMedia('(prefers-color-scheme: dark)').matches\n    }\n    return theme.value === 'dark'\n  })\n\n  const initializeTheme = () => {\n    // Load theme from localStorage\n    const savedTheme = localStorage.getItem('theme') as Theme\n    if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {\n      theme.value = savedTheme\n    }\n\n    // Apply theme\n    applyTheme()\n\n    // Listen for system theme changes\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\n      if (theme.value === 'system') {\n        applyTheme()\n      }\n    })\n  }\n\n  const setTheme = (newTheme: Theme) => {\n    theme.value = newTheme\n    localStorage.setItem('theme', newTheme)\n    applyTheme()\n  }\n\n  const applyTheme = () => {\n    const html = document.documentElement\n    if (isDark.value) {\n      html.classList.add('dark')\n    } else {\n      html.classList.remove('dark')\n    }\n  }\n\n  const toggleTheme = () => {\n    if (theme.value === 'light') {\n      setTheme('dark')\n    } else if (theme.value === 'dark') {\n      setTheme('system')\n    } else {\n      setTheme('light')\n    }\n  }\n\n  return {\n    theme: computed(() => theme.value),\n    isDark,\n    initializeTheme,\n    setTheme,\n    applyTheme,\n    toggleTheme\n  }\n}) ","<template>\n  <div id=\"app\" class=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n    <RouterView />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted } from 'vue'\nimport { useThemeStore } from '@/stores/theme'\n\nconst themeStore = useThemeStore()\n\nonMounted(() => {\n  // Initialize theme\n  themeStore.initializeTheme()\n})\n</script>\n\n<style>\n/* Global styles are imported in main.ts */\n</style> ","import { createRouter, createWebHistory } from 'vue-router'\nimport type { RouteRecordRaw } from 'vue-router'\n\nconst routes: RouteRecordRaw[] = [\n  {\n    path: '/',\n    name: 'Home',\n    component: () => import('@/views/HomeView.vue'),\n    meta: { title: 'Natural Language to GraphQL Translator' }\n  },\n  {\n    path: '/translator',\n    name: 'Translator',\n    component: () => import('@/views/TranslatorView.vue'),\n    meta: { title: 'Query Translator' }\n  },\n  {\n    path: '/models',\n    name: 'Models',\n    component: () => import('@/views/ModelsView.vue'),\n    meta: { title: 'AI Models' }\n  },\n  {\n    path: '/history',\n    name: 'History',\n    component: () => import('@/views/HistoryView.vue'),\n    meta: { title: 'Query History' }\n  },\n  {\n    path: '/settings',\n    name: 'Settings',\n    component: () => import('@/views/SettingsView.vue'),\n    meta: { title: 'Settings' }\n  },\n  {\n    path: '/docs',\n    name: 'Documentation',\n    component: () => import('@/views/DocsView.vue'),\n    meta: { title: 'Documentation' }\n  },\n  {\n    path: '/:pathMatch(.*)*',\n    name: 'NotFound',\n    component: () => import('@/views/NotFoundView.vue'),\n    meta: { title: 'Page Not Found' }\n  }\n]\n\nconst router = createRouter({\n  history: createWebHistory(import.meta.env.BASE_URL),\n  routes,\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition\n    } else {\n      return { top: 0 }\n    }\n  }\n})\n\n// Global navigation guard for page titles\nrouter.beforeEach((to, from, next) => {\n  const title = to.meta.title as string\n  if (title) {\n    document.title = `${title} | MPPW MCP`\n  }\n  next()\n})\n\nexport default router ","import { createApp } from 'vue'\nimport { createPinia } from 'pinia'\nimport App from './App.vue'\nimport router from './router'\nimport './assets/css/main.css'\n\n// Create Vue app\nconst app = createApp(App)\n\n// Use plugins\napp.use(createPinia())\napp.use(router)\n\n// Mount app\napp.mount('#app') "],"file":"assets/index-byajqt6a.js"}
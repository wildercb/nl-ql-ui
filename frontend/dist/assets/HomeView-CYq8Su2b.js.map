{"version":3,"file":"HomeView-CYq8Su2b.js","sources":["../../node_modules/marked/lib/marked.esm.js","../../src/components/ChatStream.vue","../../src/components/GraphQLQueryBox.vue","../../src/components/DataResults.vue","../../src/views/HomeView.vue"],"sourcesContent":["/**\n * marked v13.0.3 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null,\n    };\n}\nlet _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape$1(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        },\n    };\n    return obj;\n}\nfunction cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch {\n        return null;\n    }\n    return href;\n}\nconst noopTest = { exec: () => null };\nfunction splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape$1(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text),\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape$1(text),\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nclass _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0],\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text,\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text,\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: rtrim(cap[0], '\\n'),\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            let lines = rtrim(cap[0], '\\n').split('\\n');\n            let raw = '';\n            let text = '';\n            const tokens = [];\n            while (lines.length > 0) {\n                let inBlockquote = false;\n                const currentLines = [];\n                let i;\n                for (i = 0; i < lines.length; i++) {\n                    // get lines up to a continuation\n                    if (/^ {0,3}>/.test(lines[i])) {\n                        currentLines.push(lines[i]);\n                        inBlockquote = true;\n                    }\n                    else if (!inBlockquote) {\n                        currentLines.push(lines[i]);\n                    }\n                    else {\n                        break;\n                    }\n                }\n                lines = lines.slice(i);\n                const currentRaw = currentLines.join('\\n');\n                const currentText = currentRaw\n                    // precede setext continuation with 4 spaces so it isn't a setext\n                    .replace(/\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g, '\\n    $1')\n                    .replace(/^ {0,3}>[ \\t]?/gm, '');\n                raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n                text = text ? `${text}\\n${currentText}` : currentText;\n                // parse blockquote lines as top level tokens\n                // merge paragraphs if this is a continuation\n                const top = this.lexer.state.top;\n                this.lexer.state.top = true;\n                this.lexer.blockTokens(currentText, tokens, true);\n                this.lexer.state.top = top;\n                // if there is no continuation then we are done\n                if (lines.length === 0) {\n                    break;\n                }\n                const lastToken = tokens[tokens.length - 1];\n                if (lastToken?.type === 'code') {\n                    // blockquote continuation cannot be preceded by a code block\n                    break;\n                }\n                else if (lastToken?.type === 'blockquote') {\n                    // include continuation in nested blockquote\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.blockquote(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n                    break;\n                }\n                else if (lastToken?.type === 'list') {\n                    // include continuation in nested list\n                    const oldToken = lastToken;\n                    const newText = oldToken.raw + '\\n' + lines.join('\\n');\n                    const newToken = this.list(newText);\n                    tokens[tokens.length - 1] = newToken;\n                    raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n                    text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n                    lines = newText.substring(tokens[tokens.length - 1].raw.length).split('\\n');\n                    continue;\n                }\n            }\n            return {\n                type: 'blockquote',\n                raw,\n                tokens,\n                text,\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: [],\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                let raw = '';\n                let itemContents = '';\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let blankLine = !line.trim();\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else if (blankLine) {\n                    indent = cap[1].length + 1;\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                if (blankLine && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: [],\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = list.items[list.items.length - 1].raw.trimEnd();\n            list.items[list.items.length - 1].text = list.items[list.items.length - 1].text.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0],\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title,\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: [],\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (let i = 0; i < headers.length; i++) {\n            item.header.push({\n                text: headers[i],\n                tokens: this.lexer.inline(headers[i]),\n                header: true,\n                align: item.align[i],\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell),\n                    header: false,\n                    align: item.align[i],\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1]),\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text),\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0]),\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape$1(cap[1]),\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0],\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text,\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text),\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text),\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape$1(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0],\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2]),\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape$1(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape$1(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape$1(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text,\n                    },\n                ],\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape$1(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text,\n            };\n        }\n    }\n}\n\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .replace(/blockCode/g, / {4}/) // indented code blocks can interrupt\n    .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n    .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n    .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n    .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n    + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText,\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex(),\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex(),\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}\\\\p{S}';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest,\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex(),\n};\n/**\n * exports\n */\nconst block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic,\n};\nconst inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic,\n};\n\n/**\n * Block Lexer\n */\nclass _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true,\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal,\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline,\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = [], lastParagraphClipped = false) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title,\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n\n/**\n * Renderer\n */\nclass _Renderer {\n    options;\n    parser; // set by the parser\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(token) {\n        return '';\n    }\n    code({ text, lang, escaped }) {\n        const langString = (lang || '').match(/^\\S*/)?.[0];\n        const code = text.replace(/\\n$/, '') + '\\n';\n        if (!langString) {\n            return '<pre><code>'\n                + (escaped ? code : escape$1(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape$1(langString)\n            + '\">'\n            + (escaped ? code : escape$1(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote({ tokens }) {\n        const body = this.parser.parse(tokens);\n        return `<blockquote>\\n${body}</blockquote>\\n`;\n    }\n    html({ text }) {\n        return text;\n    }\n    heading({ tokens, depth }) {\n        return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n    }\n    hr(token) {\n        return '<hr>\\n';\n    }\n    list(token) {\n        const ordered = token.ordered;\n        const start = token.start;\n        let body = '';\n        for (let j = 0; j < token.items.length; j++) {\n            const item = token.items[j];\n            body += this.listitem(item);\n        }\n        const type = ordered ? 'ol' : 'ul';\n        const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(item) {\n        let itemBody = '';\n        if (item.task) {\n            const checkbox = this.checkbox({ checked: !!item.checked });\n            if (item.loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                }\n                else {\n                    item.tokens.unshift({\n                        type: 'text',\n                        raw: checkbox + ' ',\n                        text: checkbox + ' ',\n                    });\n                }\n            }\n            else {\n                itemBody += checkbox + ' ';\n            }\n        }\n        itemBody += this.parser.parse(item.tokens, !!item.loose);\n        return `<li>${itemBody}</li>\\n`;\n    }\n    checkbox({ checked }) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph({ tokens }) {\n        return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n    }\n    table(token) {\n        let header = '';\n        // header\n        let cell = '';\n        for (let j = 0; j < token.header.length; j++) {\n            cell += this.tablecell(token.header[j]);\n        }\n        header += this.tablerow({ text: cell });\n        let body = '';\n        for (let j = 0; j < token.rows.length; j++) {\n            const row = token.rows[j];\n            cell = '';\n            for (let k = 0; k < row.length; k++) {\n                cell += this.tablecell(row[k]);\n            }\n            body += this.tablerow({ text: cell });\n        }\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow({ text }) {\n        return `<tr>\\n${text}</tr>\\n`;\n    }\n    tablecell(token) {\n        const content = this.parser.parseInline(token.tokens);\n        const type = token.header ? 'th' : 'td';\n        const tag = token.align\n            ? `<${type} align=\"${token.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong({ tokens }) {\n        return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n    }\n    em({ tokens }) {\n        return `<em>${this.parser.parseInline(tokens)}</em>`;\n    }\n    codespan({ text }) {\n        return `<code>${text}</code>`;\n    }\n    br(token) {\n        return '<br>';\n    }\n    del({ tokens }) {\n        return `<del>${this.parser.parseInline(tokens)}</del>`;\n    }\n    link({ href, title, tokens }) {\n        const text = this.parser.parseInline(tokens);\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image({ href, title, text }) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(token) {\n        return 'tokens' in token && token.tokens ? this.parser.parseInline(token.tokens) : token.text;\n    }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass _TextRenderer {\n    // no need for block level renderers\n    strong({ text }) {\n        return text;\n    }\n    em({ text }) {\n        return text;\n    }\n    codespan({ text }) {\n        return text;\n    }\n    del({ text }) {\n        return text;\n    }\n    html({ text }) {\n        return text;\n    }\n    text({ text }) {\n        return text;\n    }\n    link({ text }) {\n        return '' + text;\n    }\n    image({ text }) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n\n/**\n * Parsing & Compiling\n */\nclass _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.renderer.parser = this;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const genericToken = anyToken;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'space': {\n                    out += this.renderer.space(token);\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr(token);\n                    continue;\n                }\n                case 'heading': {\n                    out += this.renderer.heading(token);\n                    continue;\n                }\n                case 'code': {\n                    out += this.renderer.code(token);\n                    continue;\n                }\n                case 'table': {\n                    out += this.renderer.table(token);\n                    continue;\n                }\n                case 'blockquote': {\n                    out += this.renderer.blockquote(token);\n                    continue;\n                }\n                case 'list': {\n                    out += this.renderer.list(token);\n                    continue;\n                }\n                case 'html': {\n                    out += this.renderer.html(token);\n                    continue;\n                }\n                case 'paragraph': {\n                    out += this.renderer.paragraph(token);\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = this.renderer.text(textToken);\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + this.renderer.text(textToken);\n                    }\n                    if (top) {\n                        out += this.renderer.paragraph({\n                            type: 'paragraph',\n                            raw: body,\n                            text: body,\n                            tokens: [{ type: 'text', raw: body, text: body }],\n                        });\n                    }\n                    else {\n                        out += body;\n                    }\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const anyToken = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[anyToken.type]) {\n                const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            const token = anyToken;\n            switch (token.type) {\n                case 'escape': {\n                    out += renderer.text(token);\n                    break;\n                }\n                case 'html': {\n                    out += renderer.html(token);\n                    break;\n                }\n                case 'link': {\n                    out += renderer.link(token);\n                    break;\n                }\n                case 'image': {\n                    out += renderer.image(token);\n                    break;\n                }\n                case 'strong': {\n                    out += renderer.strong(token);\n                    break;\n                }\n                case 'em': {\n                    out += renderer.em(token);\n                    break;\n                }\n                case 'codespan': {\n                    out += renderer.codespan(token);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br(token);\n                    break;\n                }\n                case 'del': {\n                    out += renderer.del(token);\n                    break;\n                }\n                case 'text': {\n                    out += renderer.text(token);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n\nclass _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens',\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n\nclass Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (['options', 'parser'].includes(prop)) {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    let rendererFunc = pack.renderer[rendererProp];\n                    if (!pack.useNewRenderer) {\n                        // TODO: Remove this in next major version\n                        rendererFunc = this.#convertRendererFunction(rendererFunc, rendererProp, renderer);\n                    }\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    // TODO: Remove this in next major release\n    #convertRendererFunction(func, prop, renderer) {\n        switch (prop) {\n            case 'heading':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, renderer.parser.parseInline(token.tokens), token.depth, unescape(renderer.parser.parseInline(token.tokens, renderer.parser.textRenderer)));\n                };\n            case 'code':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.lang, !!token.escaped);\n                };\n            case 'table':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < token.header.length; j++) {\n                        cell += this.tablecell({\n                            text: token.header[j].text,\n                            tokens: token.header[j].tokens,\n                            header: true,\n                            align: token.align[j],\n                        });\n                    }\n                    header += this.tablerow({ text: cell });\n                    let body = '';\n                    for (let j = 0; j < token.rows.length; j++) {\n                        const row = token.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.tablecell({\n                                text: row[k].text,\n                                tokens: row[k].tokens,\n                                header: false,\n                                align: token.align[k],\n                            });\n                        }\n                        body += this.tablerow({ text: cell });\n                    }\n                    return func.call(this, header, body);\n                };\n            case 'blockquote':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const body = this.parser.parse(token.tokens);\n                    return func.call(this, body);\n                };\n            case 'list':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    const ordered = token.ordered;\n                    const start = token.start;\n                    const loose = token.loose;\n                    let body = '';\n                    for (let j = 0; j < token.items.length; j++) {\n                        const item = token.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.checkbox({ checked: !!checked });\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' ',\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parser.parse(item.tokens, loose);\n                        body += this.listitem({\n                            type: 'list_item',\n                            raw: itemBody,\n                            text: itemBody,\n                            task,\n                            checked: !!checked,\n                            loose,\n                            tokens: item.tokens,\n                        });\n                    }\n                    return func.call(this, body, ordered, start);\n                };\n            case 'html':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text, token.block);\n                };\n            case 'paragraph':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'escape':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'link':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, this.parser.parseInline(token.tokens));\n                };\n            case 'image':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.href, token.title, token.text);\n                };\n            case 'strong':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'em':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'codespan':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            case 'del':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, this.parser.parseInline(token.tokens));\n                };\n            case 'text':\n                return function (token) {\n                    if (!token.type || token.type !== prop) {\n                        // @ts-ignore\n                        // eslint-disable-next-line prefer-rest-params\n                        return func.apply(this, arguments);\n                    }\n                    return func.call(this, token.text);\n                };\n            // do nothing\n        }\n        return func;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape$1(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n\nconst markedInstance = new Marked();\nfunction marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = _Parser.parse;\nconst lexer = _Lexer.lex;\n\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n//# sourceMappingURL=marked.esm.js.map\n","<template>\n  <div class=\"h-full flex flex-col\">\n    <div ref=\"scrollArea\" class=\"flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar\">\n      <div v-if=\"messages.length === 0\" class=\"text-center text-gray-400 pt-8\">\n        <i class=\"fas fa-comments text-4xl mb-2\"></i>\n        <p class=\"font-semibold\">{{ title }}</p>\n        <p class=\"text-sm\">Enter a query below to start the conversation.</p>\n      </div>\n\n      <div v-for=\"(msg, index) in messages\" :key=\"index\" :class=\"messageClass(msg)\">\n        <div v-if=\"msg.role === 'user'\" class=\"flex items-end justify-end\">\n          <div class=\"bg-blue-600 text-white p-3 rounded-lg max-w-lg shadow-md\">\n            <p v-html=\"renderMarkdown(msg.content)\"></p>\n            <div class=\"text-right text-xs text-blue-200 mt-1\">{{ msg.timestamp }}</div>\n          </div>\n          <div class=\"w-8 h-8 ml-2 rounded-full bg-blue-600 text-white flex items-center justify-center font-bold\">U</div>\n        </div>\n\n        <div v-else class=\"flex items-start\">\n          <div class=\"w-8 h-8 mr-2 rounded-full bg-gray-700 text-white flex items-center justify-center\">\n            <i :class=\"getAgentIcon(msg.agent)\"></i>\n          </div>\n          <div class=\"bg-gray-700 p-3 rounded-lg max-w-lg shadow-md\">\n            <p class=\"font-bold text-purple-400 text-sm capitalize\">{{ msg.agent }}</p>\n            <div class=\"text-white prose prose-sm max-w-none\" v-html=\"renderMarkdown(msg.content)\"></div>\n            <div v-if=\"msg.isStreaming\" class=\"typing-indicator\">\n              <span></span><span></span><span></span>\n            </div>\n            <div class=\"text-left text-xs text-gray-400 mt-1\">{{ msg.timestamp }}</div>\n          </div>\n        </div>\n      </div>\n       <div v-if=\"loading\" class=\"flex items-center justify-center p-4\">\n          <i class=\"fas fa-spinner fa-spin text-2xl text-purple-500\"></i>\n          <span class=\"ml-2\">Processing...</span>\n      </div>\n    </div>\n\n    <!-- Chat Input -->\n    <div class=\"p-4 border-t border-gray-700\">\n      <div class=\"flex space-x-2\">\n        <input\n          v-model=\"chatInput\"\n          @keyup.enter=\"sendMessage\"\n          :disabled=\"isChatProcessing\"\n          type=\"text\"\n          placeholder=\"Continue the conversation...\"\n          class=\"flex-1 bg-gray-700 border border-gray-600 rounded-md px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500 disabled:opacity-50\"\n        />\n        <button\n          @click=\"sendMessage\"\n          :disabled=\"!chatInput.trim() || isChatProcessing\"\n          class=\"bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-md transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          <i class=\"fas fa-paper-plane\"></i>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, nextTick } from 'vue';\nimport { marked } from 'marked';\n\ninterface Message {\n  role: 'user' | 'agent';\n  agent?: string;\n  content: string;\n  timestamp: string;\n  isStreaming?: boolean;\n}\n\nconst props = defineProps<{\n  title?: string;\n  messages: Message[];\n  loading: boolean;\n  selectedModel?: string;\n}>();\n\nconst emit = defineEmits<{\n  sendMessage: [message: string];\n}>();\n\nconst scrollArea = ref<HTMLElement | null>(null);\nconst chatInput = ref('');\nconst isChatProcessing = ref(false);\n\nconst scrollToBottom = () => {\n  nextTick(() => {\n    if (scrollArea.value) {\n      scrollArea.value.scrollTop = scrollArea.value.scrollHeight;\n    }\n  });\n};\n\nconst sendMessage = async () => {\n  if (!chatInput.value.trim() || isChatProcessing.value) return;\n  \n  const message = chatInput.value.trim();\n  chatInput.value = '';\n  isChatProcessing.value = true;\n  \n  try {\n    emit('sendMessage', message);\n  } catch (error) {\n    console.error('Failed to send message:', error);\n  } finally {\n    isChatProcessing.value = false;\n  }\n};\n\nconst renderMarkdown = (content: string) => {\n  if (!content) return '';\n  return marked(content, { gfm: true, breaks: true });\n};\n\nconst messageClass = (msg: Message) => {\n  return msg.role === 'user' ? 'justify-end' : 'justify-start';\n};\n\nconst getAgentIcon = (agentName?: string) => {\n  const icons: { [key: string]: string } = {\n    rewriter: 'fas fa-pencil-alt',\n    translator: 'fas fa-language',\n    reviewer: 'fas fa-check-double',\n    optimizer: 'fas fa-bolt',\n    system: 'fas fa-cogs'\n  };\n  return icons[agentName || 'system'] || 'fas fa-robot';\n};\n\nwatch(() => props.messages, scrollToBottom, { deep: true });\nwatch(() => props.loading, scrollToBottom);\n\n</script>\n\n<style scoped>\n.prose {\n  color: inherit;\n}\n.prose :where(code):not(:where([class~=\"not-prose\"] *))::before,\n.prose :where(code):not(:where([class~=\"not-prose\"] *))::after {\n  content: none;\n}\n.prose :where(pre) {\n    background-color: #111827; /* bg-gray-900 */\n    color: #e5e7eb; /* text-gray-200 */\n    border-radius: 0.5rem;\n    padding: 0.75rem 1rem;\n    overflow-x: auto;\n}\n.prose :where(code) {\n    background-color: #374151; /* bg-gray-700 */\n    color: #f3f4f6; /* text-gray-100 */\n    padding: 0.2rem 0.4rem;\n    border-radius: 0.25rem;\n    font-size: 0.85em;\n    font-weight: 600;\n}\n.prose pre code {\n  background-color: transparent;\n  padding: 0;\n  font-weight: inherit;\n}\n\n.custom-scrollbar::-webkit-scrollbar {\n  width: 8px;\n}\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background-color: #4B5563; /* bg-gray-600 */\n  border-radius: 4px;\n}\n.custom-scrollbar::-webkit-scrollbar-track {\n  background-color: transparent;\n}\n\n.typing-indicator {\n  display: inline-block;\n  margin-left: 6px;\n}\n.typing-indicator span {\n  height: 6px;\n  width: 6px;\n  background-color: #a78bfa; /* purple-400 */\n  border-radius: 50%;\n  display: inline-block;\n  animation: wave 1.3s infinite;\n}\n.typing-indicator span:nth-of-type(2) {\n  animation-delay: -1.1s;\n}\n.typing-indicator span:nth-of-type(3) {\n  animation-delay: -0.9s;\n}\n@keyframes wave {\n  0%, 60%, 100% { transform: translate(0, 0); }\n  30% { transform: translate(0, -6px); }\n}\n</style> ","<template>\n  <div class=\"rounded-2xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg overflow-hidden\">\n    <div class=\"px-6 py-3 flex items-center justify-between border-b border-gray-200 dark:border-gray-700\">\n      <h3 class=\"text-md font-semibold text-gray-800 dark:text-gray-100 flex items-center\">\n        <i class=\"fas fa-code mr-2 text-blue-600\"></i> Generated GraphQL\n      </h3>\n      <button\n        class=\"text-sm px-3 py-1 rounded bg-blue-600 hover:bg-blue-700 text-white disabled:opacity-50\"\n        :disabled=\"!query.trim()\"\n        @click=\"$emit('send')\"\n      >\n        Send\n      </button>\n    </div>\n\n    <pre class=\"p-4 text-xs whitespace-pre-wrap break-words max-h-60 overflow-y-auto custom-scrollbar text-gray-800 dark:text-gray-100\">\n{{ query || 'Waiting for translation…' }}\n    </pre>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { defineProps } from 'vue'\n\ndefineProps<{ query: string }>()\n</script>\n\n<style scoped>\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background-color: rgba(156, 163, 175, 0.6);\n  border-radius: 3px;\n}\n</style> ","<template>\n  <div class=\"rounded-2xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg overflow-hidden\">\n    <div class=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between\">\n      <h3 class=\"text-lg font-bold text-gray-800 dark:text-gray-100 flex items-center\">\n        <i class=\"fas fa-database mr-2 text-green-600\"></i> Results\n      </h3>\n      <span v-if=\"results.length\" class=\"text-xs text-gray-500\">{{ results.length }} docs</span>\n    </div>\n\n    <div v-if=\"loading\" class=\"text-center py-10\">\n      <i class=\"fas fa-spinner fa-spin text-green-500 text-2xl\"></i>\n    </div>\n\n    <div v-else-if=\"results.length === 0\" class=\"text-center py-10 text-gray-400\">\n      No data returned.\n    </div>\n\n    <!-- Results list -->\n    <div v-else class=\"p-6 space-y-6 max-h-[50vh] overflow-y-auto custom-scrollbar\">\n      <div\n        v-for=\"(doc, idx) in results\"\n        :key=\"idx\"\n        class=\"border border-gray-200 dark:border-gray-700 rounded-xl p-4 bg-gray-50 dark:bg-gray-800\"\n      >\n        <pre class=\"text-xs whitespace-pre-wrap break-words text-gray-800 dark:text-gray-100\">\n{{ formatted(doc) }}\n        </pre>\n        <!-- If doc contains media urls show thumbnails -->\n        <div v-if=\"mediaUrls(doc).length\" class=\"flex flex-wrap gap-3 mt-2\">\n          <component\n            v-for=\"(m, i) in mediaUrls(doc)\"\n            :key=\"i\"\n            :is=\"m.type === 'image' ? 'img' : 'video'\"\n            :src=\"m.url\"\n            class=\"max-h-40 rounded shadow\"\n            v-bind=\"m.type === 'video' ? { controls: true } : {}\"\n          />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { defineProps } from 'vue'\n\ninterface Doc {\n  [key: string]: any\n}\n\nconst props = defineProps<{ results: Doc[]; loading: boolean }>()\n\nconst formatted = (doc: Doc) => JSON.stringify(doc, null, 2)\n\n// naive media detection\nconst mediaUrls = (doc: Doc) => {\n  const urls: { url: string; type: 'image' | 'video' }[] = []\n  Object.values(doc).forEach((val) => {\n    if (typeof val === 'string') {\n      if (val.match(/\\.(png|jpe?g|gif|webp)$/i)) {\n        urls.push({ url: val, type: 'image' })\n      } else if (val.match(/\\.(mp4|webm|ogg)$/i)) {\n        urls.push({ url: val, type: 'video' })\n      }\n    }\n  })\n  return urls\n}\n</script>\n\n<style scoped>\n.custom-scrollbar::-webkit-scrollbar {\n  width: 6px;\n}\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background-color: rgba(156, 163, 175, 0.6);\n  border-radius: 3px;\n}\n</style> ","<template>\n  <div class=\"flex flex-col h-screen bg-gray-900 text-white\">\n    <!-- Main Content -->\n    <div class=\"flex-1 flex flex-col p-6 overflow-hidden\">\n      <!-- Input Area -->\n      <div class=\"mb-4\">\n        <textarea\n          v-model=\"naturalQuery\"\n          @keyup.enter=\"runPipeline('standard')\"\n          :disabled=\"isProcessing\"\n          class=\"w-full p-3 bg-gray-700 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500\"\n          placeholder=\"Enter your natural language query here...\"\n        ></textarea>\n        <div class=\"flex space-x-2 mt-2 items-center\">\n          <button @click=\"runPipeline('fast')\" :disabled=\"isProcessing\" class=\"btn-primary\">\n            <i class=\"fas fa-bolt mr-2\"></i> Translate\n          </button>\n          <button @click=\"runPipeline('standard')\" :disabled=\"isProcessing\" class=\"btn-primary\">\n            <i class=\"fas fa-users-cog mr-2\"></i> Multi-Agent\n          </button>\n          <button @click=\"runPipeline('comprehensive')\" :disabled=\"isProcessing\" class=\"btn-primary\">\n            <i class=\"fas fa-rocket mr-2\"></i> Enhanced Agents\n          </button>\n          <select v-model=\"selectedModel\" class=\"ml-4 p-2 bg-gray-700 border border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\" :disabled=\"isProcessing\">\n            <option value=\"phi3:mini\">phi3:mini</option>\n            <option value=\"gemma3:4b\">gemma3:4b</option>\n            <option value=\"llama4:16x17b\">llama4:16x17b</option>\n          </select>\n        </div>\n      </div>\n\n      <!-- Results Area -->\n      <div class=\"flex-1 grid grid-cols-1 lg:grid-cols-2 gap-6 overflow-hidden\">\n        <!-- Left Panel: Chat Stream -->\n        <div class=\"flex flex-col overflow-hidden\">\n          <ChatStream \n            :messages=\"chatMessages\" \n            :loading=\"isProcessing\" \n            title=\"Agent Stream\" \n            :selectedModel=\"selectedModel\"\n            @sendMessage=\"handleChatMessage\"\n          />\n        </div>\n\n        <!-- Right Panel: GraphQL and Data -->\n        <div class=\"flex flex-col space-y-6 overflow-hidden\">\n          <GraphQLQueryBox :query=\"finalGraphQLQuery\" @send=\"runDataQuery\" />\n          <DataResults :results=\"dataQueryResults\" :loading=\"isDataLoading\" />\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, onMounted, nextTick, watch } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useAuthStore } from '../stores/auth';\nimport { useHistoryStore } from '../stores/history';\nimport ChatStream from '../components/ChatStream.vue';\nimport GraphQLQueryBox from '../components/GraphQLQueryBox.vue';\nimport DataResults from '../components/DataResults.vue';\n\nconst authStore = useAuthStore();\nconst historyStore = useHistoryStore();\nconst router = useRouter();\n\n// Model selection\nconst selectedModel = ref('phi3:mini');\n\n// Pipeline state\nconst naturalQuery = ref('');\nconst chatMessages = ref<any[]>([]);\nconst isProcessing = ref(false);\n\nconst finalGraphQLQuery = ref('');\nconst isDataLoading = ref(false);\nconst dataQueryResults = ref<any[]>([]);\n\n// Agent prompts and context\nconst agentPrompts = ref<any[]>([]);\nconst agentContext = ref<string>('');\n\nconst runPipeline = async (strategy: string) => {\n  if (!naturalQuery.value.trim() || isProcessing.value) return;\n\n  console.log('🚀 Starting pipeline with strategy:', strategy, 'using model:', selectedModel.value);\n  isProcessing.value = true;\n  chatMessages.value = [];\n  finalGraphQLQuery.value = '';\n  dataQueryResults.value = [];\n  agentPrompts.value = [];\n\n  chatMessages.value.push({ role: 'user', content: naturalQuery.value, timestamp: new Date().toLocaleTimeString() });\n\n  try {\n    console.log('📡 Making request to /api/multiagent/process/stream');\n    const response = await fetch('/api/multiagent/process/stream', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        query: naturalQuery.value, \n        pipeline_strategy: strategy,\n        translator_model: selectedModel.value,\n        pre_model: selectedModel.value,\n        review_model: selectedModel.value\n      }),\n    });\n\n    console.log('📥 Response status:', response.status, 'headers:', Object.fromEntries(response.headers.entries()));\n\n    if (!response.body) throw new Error(\"Response body is null\");\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    let eventCount = 0;\n\n    console.log('🔄 Starting to read stream...');\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          console.log('✅ Stream complete, processed', eventCount, 'events');\n          break;\n        }\n\n        const chunk = decoder.decode(value, { stream: true });\n        console.log('📦 Raw chunk received:', chunk.length, 'bytes');\n        console.log('📦 Raw chunk content:', JSON.stringify(chunk));\n        buffer += chunk;\n        \n        // Handle both \\r\\n and \\n line endings for SSE\n        const eventMessages = buffer.split(/\\r?\\n\\r?\\n/);\n        console.log('🔍 Buffer after adding chunk:', JSON.stringify(buffer));\n        console.log('🔍 Split into', eventMessages.length, 'potential messages');\n        buffer = eventMessages.pop() || '';\n\n        console.log('🔍 Processing', eventMessages.length, 'event messages');\n        for (const msg of eventMessages) {\n            console.log('📝 Processing message:', JSON.stringify(msg));\n            console.log('📝 Raw message:', msg);\n            const lines = msg.split(/\\r?\\n/);\n            console.log('📝 Split into lines:', lines);\n            let eventType = 'message';\n            let dataStr = '';\n            for (const line of lines) {\n                if (line.startsWith('event:')) {\n                    eventType = line.slice(6).trim();\n                    console.log('🎯 Found event type:', eventType);\n                } else if (line.startsWith('data:')) {\n                    dataStr += line.slice(5).trim();\n                    console.log('🎯 Found data line:', line.slice(5).trim());\n                }\n            }\n            console.log('🎯 Parsed event type:', eventType, 'data length:', dataStr.length);\n            if (!dataStr) {\n              console.log('⚠️ No data found, skipping');\n              continue;\n            }\n            try {\n                const parsed = JSON.parse(dataStr);\n                console.log('✅ Successfully parsed SSE event:', parsed);\n                eventCount++;\n                handleStreamEvent(parsed);\n            } catch (e) {\n                console.error('❌ Failed to parse SSE data', dataStr, e);\n            }\n        }\n    }\n  } catch (error) {\n    console.error('💥 Pipeline error:', error);\n  } finally {\n    console.log('🏁 Pipeline finished, setting isProcessing to false');\n    isProcessing.value = false;\n  }\n};\n\nconst handleStreamEvent = (event: any) => {\n  console.log('🎮 Handling stream event:', event);\n  \n  const eventType = event.event;\n  const data = event.data || event;\n  \n  console.log('📊 Event type:', eventType, 'Event data:', data);\n  \n  switch (eventType) {\n    case 'agent_start':\n      console.log('🚀 Agent starting:', data.agent);\n      const startMessage = {\n        role: 'agent',\n        agent: data.agent,\n        content: `Agent [${data.agent}] started...`,\n        timestamp: new Date().toLocaleTimeString(),\n        isStreaming: true,\n      };\n      chatMessages.value.push(startMessage);\n      console.log('💬 Added start message, total messages:', chatMessages.value.length);\n      break;\n      \n    case 'agent_token':\n      console.log('🔤 Token received for agent:', data.agent, 'token:', data.token);\n      const lastMessage = chatMessages.value[chatMessages.value.length - 1];\n      if (lastMessage && lastMessage.agent === data.agent && lastMessage.isStreaming) {\n        if (lastMessage.content.endsWith('...')) {\n          lastMessage.content = `Agent [${data.agent}] says: `;\n        }\n        lastMessage.content += data.token;\n        console.log('📝 Updated message content:', lastMessage.content);\n      } else {\n        console.log('⚠️ Could not find streaming message for agent:', data.agent);\n      }\n      break;\n      \n    case 'agent_complete':\n      console.log('✅ Agent completed:', data.agent, 'result:', data.result);\n      const agentMessage = chatMessages.value.find(m => m.agent === data.agent && m.isStreaming);\n      if (agentMessage) {\n        agentMessage.isStreaming = false;\n        if (data.agent === 'reviewer') {\n          agentMessage.content = formatReviewResult(data.result);\n          // If reviewer suggests a new query, update the GraphQL query in the UI\n          if (data.result && data.result.suggested_query) {\n            console.log('📝 Reviewer suggested new GraphQL query:', data.result.suggested_query);\n            finalGraphQLQuery.value = data.result.suggested_query;\n          }\n        } else if (data.agent === 'rewriter') {\n          agentMessage.content = data.result?.rewritten_query || '';\n        } else if (data.agent === 'translator' && data.result?.graphql_query) {\n          console.log('🔍 Setting GraphQL query:', data.result.graphql_query);\n          finalGraphQLQuery.value = data.result.graphql_query;\n        }\n        console.log('💬 Marked agent as completed, kept output or set result');\n      } else {\n        console.log('⚠️ Could not find agent message for completion:', data.agent);\n      }\n      \n      // Store agent prompts for context\n      if (data.prompt) {\n        agentPrompts.value.push({\n          agent: data.agent,\n          prompt: data.prompt,\n          result: data.result\n        });\n      }\n      break;\n      \n    case 'pipeline_complete':\n      console.log('🏁 Pipeline completed, final data:', data);\n      if (data.translation?.graphql_query && !finalGraphQLQuery.value) {\n        console.log('🔍 Setting GraphQL query from pipeline complete:', data.translation.graphql_query);\n        finalGraphQLQuery.value = data.translation.graphql_query;\n      }\n      chatMessages.value.push({\n        role: 'agent',\n        agent: 'system',\n        content: 'Pipeline completed.',\n        timestamp: new Date().toLocaleTimeString(),\n      });\n      console.log('💬 Added pipeline complete message');\n      \n      // Build context for chat\n      buildChatContext();\n      break;\n      \n    case 'error':\n      console.log('❌ Error event received:', data.error);\n      chatMessages.value.push({\n        role: 'agent',\n        agent: 'system',\n        content: `Error: ${data.error || 'Unknown error'}`,\n        timestamp: new Date().toLocaleTimeString(),\n      });\n      console.log('💬 Added error message');\n      break;\n      \n    default:\n      console.log('❓ Unknown event type:', eventType);\n  }\n  \n  console.log('📊 Current chat messages:', chatMessages.value);\n  console.log('🔍 Current GraphQL query:', finalGraphQLQuery.value);\n};\n\nconst buildChatContext = () => {\n  // Build context from agent responses and prompts\n  let context = `Original Query: ${naturalQuery.value}\\n\\n`;\n  \n  // Add agent responses\n  context += 'Agent Responses:\\n';\n  chatMessages.value.forEach(msg => {\n    if (msg.role === 'agent' && msg.agent) {\n      context += `${msg.agent}: ${msg.content}\\n`;\n    }\n  });\n  \n  // Add agent prompts\n  if (agentPrompts.value.length > 0) {\n    context += '\\nAgent Prompts:\\n';\n    agentPrompts.value.forEach(prompt => {\n      context += `${prompt.agent}:\\n`;\n      if (Array.isArray(prompt.prompt)) {\n        prompt.prompt.forEach((msg: any) => {\n          context += `${msg.role}: ${msg.content}\\n`;\n        });\n      } else {\n        context += `${prompt.prompt}\\n`;\n      }\n      context += `Result: ${JSON.stringify(prompt.result)}\\n\\n`;\n    });\n  }\n  \n  agentContext.value = context;\n};\n\nconst handleChatMessage = async (message: string) => {\n  console.log('💬 Handling chat message:', message);\n  \n  // Add user message to chat\n  chatMessages.value.push({\n    role: 'user',\n    content: message,\n    timestamp: new Date().toLocaleTimeString()\n  });\n  \n  // Add assistant message placeholder\n  const assistantMessage = {\n    role: 'agent',\n    agent: 'assistant',\n    content: '',\n    timestamp: new Date().toLocaleTimeString(),\n    isStreaming: true\n  };\n  chatMessages.value.push(assistantMessage);\n  \n  // Get reference to the message for updates\n  const messageIndex = chatMessages.value.length - 1;\n  \n  try {\n    // Prepare messages for the chat\n    const messages = [];\n    \n    // Add context if available\n    if (agentContext.value) {\n      messages.push({\n        role: 'system',\n        content: `You are a helpful assistant. Use the following context from the pipeline execution to provide informed responses:\\n\\n${agentContext.value}`\n      });\n    }\n    \n    // Add previous chat messages\n    chatMessages.value.forEach(msg => {\n      if (msg.role === 'user' || (msg.role === 'agent' && msg.agent === 'assistant')) {\n        messages.push({\n          role: msg.role === 'agent' ? 'assistant' : msg.role,\n          content: msg.content\n        });\n      }\n    });\n    \n    // Make request to chat endpoint with all required fields\n    const response = await fetch('/api/chat/stream', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        messages: messages,\n        model: selectedModel.value,\n        stream: true,\n        temperature: 0.7,\n        max_tokens: 2048\n      })\n    });\n    \n    if (!response.body) throw new Error(\"Response body is null\");\n    \n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n    \n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) break;\n      \n      const chunk = decoder.decode(value, { stream: true });\n      buffer += chunk;\n      \n      const lines = buffer.split('\\n');\n      buffer = lines.pop() || '';\n      \n      for (const line of lines) {\n        console.log('📝 Processing SSE line:', line);\n        \n        if (line.startsWith('event: ')) {\n          const eventType = line.slice(7);\n          console.log('🎯 Event type:', eventType);\n        } else if (line.startsWith('data: ')) {\n          const data = line.slice(6);\n          console.log('📊 Event data:', data);\n          \n          if (data === '[DONE]') continue;\n          \n          try {\n            const parsed = JSON.parse(data);\n            console.log('🔍 Parsed data:', parsed);\n            \n            if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta && parsed.choices[0].delta.content) {\n              const content = parsed.choices[0].delta.content;\n              console.log('📝 Adding content:', content);\n              // Update the message in the reactive array\n              chatMessages.value[messageIndex].content += content;\n            }\n          } catch (e) {\n            console.error('Failed to parse chat response:', e);\n          }\n        }\n      }\n    }\n    \n    chatMessages.value[messageIndex].isStreaming = false;\n    \n  } catch (error) {\n    console.error('Chat error:', error);\n    chatMessages.value[messageIndex].content = 'Sorry, I encountered an error. Please try again.';\n    chatMessages.value[messageIndex].isStreaming = false;\n  }\n};\n\nconst runDataQuery = async () => {\n    if (!finalGraphQLQuery.value.trim()) return;\n    isDataLoading.value = true;\n    dataQueryResults.value = [];\n    try {\n        const response = await fetch('/api/data/query', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ query: finalGraphQLQuery.value }),\n        });\n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.detail || 'Failed to fetch data');\n        }\n        const results = await response.json();\n        dataQueryResults.value = results.data;\n    } catch (error) {\n        console.error('Data query error:', error);\n        dataQueryResults.value = [{ error: String(error) }];\n    } finally {\n        isDataLoading.value = false;\n    }\n}\n\n// Auth is now handled globally in App.vue\n\n// Lifecycle\nonMounted(() => {\n  authStore.loadPersistedSession();\n});\n\nfunction formatReviewResult(result) {\n  if (!result) return '';\n  // Show comments and improvements as pretty JSON\n  return `<pre>${JSON.stringify(result, null, 2)}</pre>`;\n}\n</script>\n\n<style scoped>\n.btn-primary {\n  @apply bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed;\n}\n</style>"],"names":["_getDefaults","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","html","encode","unescapeTest","unescape","_","n","caret","edit","regex","opt","source","obj","name","val","valSource","cleanUrl","href","noopTest","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","i","rtrim","c","invert","l","suffLen","findClosingBracket","b","level","outputLink","cap","link","raw","lexer","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","_Tokenizer","options","__publicField","src","trimmed","lines","tokens","inBlockquote","currentLines","currentRaw","currentText","top","lastToken","oldToken","newText","newToken","bull","isordered","list","itemRegex","endsWithBlankLine","endEarly","itemContents","line","t","nextLine","blankLine","indent","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","spacers","hasMultipleLineBreaks","tag","headers","aligns","rows","item","align","cell","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","linkString","maskedSrc","prevChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","lastCharLength","hasNonSpaceChars","hasSpaceCharsOnBothEnds","prevCapZero","_a","newline","blockCode","fences","hr","heading","bullet","lheading","_paragraph","blockText","_blockLabel","def","_tag","_comment","paragraph","blockquote","blockNormal","gfmTable","blockGfm","blockPedantic","escape","inlineCode","br","inlineText","_punctuation","punctuation","blockSkip","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","anyPunctuation","autolink","_inlineComment","_inlineLabel","reflink","nolink","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","block","inline","_Lexer","rules","next","lastParagraphClipped","leading","tabs","cutSrc","extTokenizer","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","_Renderer","lang","langString","code","depth","ordered","start","body","j","type","startAttr","itemBody","checkbox","checked","header","k","content","cleanHref","out","_TextRenderer","_Parser","anyToken","genericToken","ret","textToken","renderer","_Hooks","markdown","Marked","args","__privateAdd","_Marked_instances","__privateMethod","parseMarkdown_fn","callback","values","tableToken","listToken","_b","childTokens","extensions","pack","opts","ext","prevRenderer","extLevel","prop","rendererProp","rendererFunc","convertRendererFunction_fn","tokenizer","tokenizerProp","tokenizerFunc","prevTokenizer","hooks","hooksProp","hooksFunc","prevHook","arg","walkTokens","packWalktokens","func","loose","task","parser","origOpt","throwError","onError_fn","e","silent","async","msg","markedInstance","marked","props","__props","emit","__emit","scrollArea","ref","chatInput","isChatProcessing","scrollToBottom","nextTick","sendMessage","message","error","renderMarkdown","messageClass","getAgentIcon","agentName","watch","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","messages","_hoisted_2","_hoisted_3","_toDisplayString","_cache","_Fragment","_renderList","index","_normalizeClass","_hoisted_4","_hoisted_5","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_13","_hoisted_14","loading","_hoisted_15","_hoisted_16","_hoisted_17","$event","query","$emit","formatted","doc","mediaUrls","urls","results","_hoisted_6","idx","m","_createBlock","_resolveDynamicComponent","_mergeProps","authStore","useAuthStore","useHistoryStore","useRouter","selectedModel","naturalQuery","chatMessages","isProcessing","finalGraphQLQuery","isDataLoading","dataQueryResults","agentPrompts","agentContext","runPipeline","strategy","response","reader","decoder","buffer","eventCount","done","value","chunk","eventMessages","eventType","dataStr","parsed","handleStreamEvent","event","data","startMessage","lastMessage","agentMessage","formatReviewResult","_c","buildChatContext","context","prompt","handleChatMessage","assistantMessage","messageIndex","runDataQuery","onMounted","result","_createVNode","ChatStream","_hoisted_12","GraphQLQueryBox","DataResults"],"mappings":"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","x_google_ignoreList":[0]}